import { User, Post, Report } from "../database/database.js";

// /api/statistics?month=9&year=2025
export const getStatistics = async (req, res) => {
  try {
    const { month, year } = req.query;

    // 1. Ng∆∞·ªùi d√πng theo tr·∫°ng th√°i
    const userStats = await User.aggregate([
      { $group: { _id: "$trangThai", count: { $sum: 1 } } }
    ]);

    // 2. B√†i ƒëƒÉng theo danh m·ª•c
    const postByCategory = await Post.aggregate([
      {
        $lookup: {
          from: "categories",
          localField: "danhMuc",
          foreignField: "_id",
          as: "category"
        }
      },
      { $unwind: "$category" },
      { $group: { _id: "$category.tenDanhMuc", count: { $sum: 1 } } }
    ]);

    // 3. B√†i ƒëƒÉng theo tr·∫°ng th√°i
    const postByStatus = await Post.aggregate([
      { $group: { _id: "$trangThaiBaiDang", count: { $sum: 1 } } }
    ]);

    // 4. B√°o c√°o theo l√Ω do
    const reportByReason = await Report.aggregate([
      { $group: { _id: "$lyDo", count: { $sum: 1 } } }
    ]);

    // 5. üîù Top 10 b√†i b·ªã b√°o c√°o nhi·ªÅu nh·∫•t theo th√°ng/nƒÉm
    let filter = {};
    if (month && year) {
      filter = {
        thoiGianBaoCao: {
          $gte: new Date(year, month - 1, 1),
          $lt: new Date(year, month, 1)
        }
      };
    }

    const topReportedPosts = await Report.aggregate([
      { $match: filter },
      {
        $group: {
          _id: "$baiBiBaoCao",
          soLanBaoCao: { $sum: 1 }
        }
      },
      { $sort: { soLanBaoCao: -1 } },
      { $limit: 10 },
      {
        $lookup: {
          from: "posts",
          localField: "_id",
          foreignField: "_id",
          as: "post"
        }
      },
      { $unwind: "$post" },
      {
        $project: {
          postId: "$post._id",
          tieuDe: "$post.moTa",   // ho·∫∑c ƒë·ªïi th√†nh post.tieuDe n·∫øu b·∫°n th√™m field n√†y
          hinhAnh: "$post.hinhAnh",
          soLanBaoCao: 1,
          thoiGianDang: "$post.thoiGianDang"
        }
      }
    ]);

    // 6. T·ª∑ l·ªá b√°o c√°o ƒë√£ x·ª≠ l√Ω
    const totalReports = await Report.countDocuments();
    const processedReports = await Report.countDocuments({
      trangThai: { $ne: "ƒêang x·ª≠ l√Ω" }
    });
    const reportHandledRate =
      totalReports > 0 ? (processedReports / totalReports) * 100 : 0;

    res.status(200).json({
      userStats,
      postByCategory,
      postByStatus,
      reportByReason,
      topReportedPosts,   // ‚úÖ g·ª≠i cho frontend
      reportHandledRate
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y th·ªëng k√™:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};
